<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Grafana on Tanmay Bhat</title>
    <link>https://tanmay-bhat.github.io/tags/grafana/</link>
    <description>Recent content in Grafana on Tanmay Bhat</description>
    <image>
      <title>Tanmay Bhat</title>
      <url>https://tanmay-bhat.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://tanmay-bhat.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.134.2</generator>
    <language>en</language>
    <lastBuildDate>Fri, 29 Dec 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://tanmay-bhat.github.io/tags/grafana/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configure JWT Authentication with Grafana</title>
      <link>https://tanmay-bhat.github.io/posts/configure-jwt-auth-grafana/</link>
      <pubDate>Fri, 29 Dec 2023 00:00:00 +0000</pubDate>
      <guid>https://tanmay-bhat.github.io/posts/configure-jwt-auth-grafana/</guid>
      <description>&lt;p&gt;JSON Web Tokens (JWTs) offer seamless sign-in, allowing users to carry their authentication securely across different applications within the same ecosystem. In this article, let&amp;rsquo;s go through the process of configuring JWT-based authentication with Grafana for a smoother user experience.&lt;/p&gt;
&lt;h3 id=&#34;create-a-rsa-key-pair&#34;&gt;Create a RSA key pair&lt;/h3&gt;
&lt;p&gt;Begin by creating an RSA key pair. The private key will sign the JWT token, while the public key will verify it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-keygen -t rsa -b &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; -m PEM -f grafana.key -N &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openssl rsa -in grafana.key -pubout -outform PEM -out grafana.key.pub
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;configure-jwt-authentication&#34;&gt;Configure JWT authentication&lt;/h3&gt;
&lt;p&gt;With the key pair in place, configure JWT authentication in Grafana. You can use environment variables or a configuration file. Here&amp;rsquo;s an example using environment variables:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Monitor Gaming Laptop Using Grafana and OhmGraphite</title>
      <link>https://tanmay-bhat.github.io/posts/monitor-gaming-laptop-using-grafana--ohmgraphite/</link>
      <pubDate>Mon, 29 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://tanmay-bhat.github.io/posts/monitor-gaming-laptop-using-grafana--ohmgraphite/</guid>
      <description>&lt;p&gt;&lt;img alt=&#34;Grafana laptop diagram&#34; loading=&#34;lazy&#34; src=&#34;https://tanmay-bhat.github.io/grafana-laptop-image.png&#34;&gt;
I’ve recently got a gaming laptop and monitoring the CPU &amp;amp; GPU temperature of it has been a tedious task, like install MSI Afterburner, configure statistics server, configure overlay etc.&lt;/p&gt;
&lt;p&gt;That made me use Grafana’s product suite to configure monitoring of key components such as CPU, GPU, Network, Disk and alerting for my laptop such that I can game in peace and when my laptop’s temperature reaches a certain threshold limit, I’ll get a phone call.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Configure Grafana to Use Remote Database for HA</title>
      <link>https://tanmay-bhat.github.io/posts/how-to-configure-grafana-to-use-remote-database-for-ha/</link>
      <pubDate>Mon, 22 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://tanmay-bhat.github.io/posts/how-to-configure-grafana-to-use-remote-database-for-ha/</guid>
      <description>&lt;p&gt;&lt;img alt=&#34;Grafana HA diagram&#34; loading=&#34;lazy&#34; src=&#34;https://tanmay-bhat.github.io/grafana-ha.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this article, we’ll see how to setup Grafana with a remote database so that we can scale Grafana to N instances.&lt;/p&gt;
&lt;p&gt;The default SQLite database will not work with scaling beyond 1 instance since the SQLite3 DB is embedded inside Grafana container.&lt;/p&gt;
&lt;h3 id=&#34;create-remote-postgresql-using-flyiohttpflyio-optional&#34;&gt;Create Remote &lt;strong&gt;PostgreSQL using &lt;a href=&#34;http://fly.io&#34;&gt;fly.io&lt;/a&gt; (Optional)&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;For this demonstration, I’ll be using &lt;a href=&#34;https://fly.io/docs/reference/postgres/&#34;&gt;fly.io&lt;/a&gt;’s PostgreSQL service.&lt;/li&gt;
&lt;li&gt;Its free (no need to add credit card) and it has 1 GB of storage for DB and should be enough to try out with Grafana.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : If you already have a remote DB such as AWS RDS (or local DB) running, you can skip this step.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Self monitoring Prometheus with Grafana</title>
      <link>https://tanmay-bhat.github.io/posts/prometheus-self-metrics/</link>
      <pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://tanmay-bhat.github.io/posts/prometheus-self-metrics/</guid>
      <description>&lt;p&gt;Who will monitor the monitoring system ? &lt;em&gt;Itself&lt;/em&gt;&amp;hellip;&amp;hellip;&amp;hellip;sounds a bit magical.&lt;/p&gt;
&lt;p&gt;Since Prometheus monitors everything, it&amp;rsquo;s essential that we keep an eye on Prometheus so that over observability pillar stays strong.&lt;/p&gt;
&lt;p&gt;If Prometheus goes down, you won&amp;rsquo;t be having any metrics, hence no alert for any services, scary stuff along with a call from your boss !!&lt;/p&gt;
&lt;h3 id=&#34;configuring-prometheus-to-monitor-itself&#34;&gt;&lt;strong&gt;&lt;strong&gt;Configuring Prometheus to monitor itself&lt;/strong&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Prometheus exposes metrics about itself  at &lt;code&gt;/metrics&lt;/code&gt; endpoint, hence it can scrape and monitor its own health.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
